// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int          @id @default(autoincrement())
  username   String       @unique
  password   String
  posts      Post[]
  chatmember Chatmember[]
  friends1   Friend[]     @relation("User1")
  friends2   Friend[]     @relation("User2")
}

model Friend {
  user1   User @relation("User1", fields: [user1Id], references: [id])
  user1Id Int
  user2   User @relation("User2", fields: [user2Id], references: [id])
  user2Id Int

  @@id([user1Id, user2Id])
}

model Post {
  id        Int      @id @default(autoincrement())
  createdAt DateTime
  content   String
  postedBy  String   @db.VarChar(255)
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
}

model Chatroom {
  id           String        @id @default(uuid())
  chatid       String
  chatmember   Chatmember[]
  chatmessages Chatmessage[]
}

model Chatmember {
  id         Int      @id @default(autoincrement())
  user       User     @relation(fields: [userId], references: [id])
  userId     Int
  chatroom   Chatroom @relation(fields: [chatroomId], references: [id])
  chatroomId String
}

model Chatmessage {
  id         Int      @id @default(autoincrement())
  content    String
  date       DateTime
  createdAt  DateTime @default(now())
  chatroomId String
  postedBy   String
  chatroom   Chatroom @relation(fields: [chatroomId], references: [id])
}
