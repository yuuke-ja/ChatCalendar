generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int          @id @default(autoincrement())
  username     String
  email        String       @unique
  password     String
  code         String
  timerimit    DateTime
  isVerified   Boolean
  googleid     String?      @unique
  yahooid      String?      @unique
  chatmember   Chatmember[]
  countbatches Countbatch[]
  friends1     Friend[]     @relation("User1")
  friends2     Friend[]     @relation("User2")
  posts        Post[]
  chatmessages  Chatmessage[]
  reactions  Reaction[] 
  favorites    Favorite[]   @relation("FavoriteUser")
  favoritedBy  Favorite[]   @relation("FavoriteTarget")
}

model Friend {
  user1Id Int
  user2Id Int
  user1   User @relation("User1", fields: [user1Id], references: [id])
  user2   User @relation("User2", fields: [user2Id], references: [id])

  @@id([user1Id, user2Id])
}
model Favorite {
  id        Int   @id @default(autoincrement())
  userId    Int   
  targetId  Int  

  user   User @relation("FavoriteUser", fields: [userId], references: [id])
  target User @relation("FavoriteTarget", fields: [targetId], references: [id])

  @@unique([userId, targetId])
}


model Post {
  id        Int      @id @default(autoincrement())
  createdAt DateTime
  content   String
  postedBy  String   @db.VarChar(255)
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  memos     Memo[] 
}
model Memo {
  id        Int      @id @default(autoincrement())
  content   String
  postId    Int
  post      Post     @relation(fields: [postId], references: [id])
}

model Chatroom {
  id           String        @id @default(uuid())
  chatid       String
  authority    Boolean @default(false)
  invitationauthority    Boolean @default(false)
  chatmember   Chatmember[]
  chatmessages Chatmessage[]
  countbatches Countbatch[]
}

model Chatmember {
  id         Int      @id @default(autoincrement())
  userId     Int
  chatroomId String
  role       String   @default("member")
  chatroom   Chatroom @relation(fields: [chatroomId], references: [id])
  user       User     @relation(fields: [userId], references: [id])
  @@unique([chatroomId, userId])  
}

model Chatmessage {
  id         Int      @id @default(autoincrement())
  imageUrl   String?
  content    String
  email      String
  date       DateTime
  createdAt  DateTime @default(now())
  chatroomId String
  userId     Int  
  important  Boolean  @default(false)
  deleted    Boolean  @default(false)
  user       User     @relation(fields: [userId], references: [id])
  chatroom   Chatroom @relation(fields: [chatroomId], references: [id])
  reactions  Reaction[] 
}

model Countbatch {
  id         Int      @id @default(autoincrement())
  userId     Int
  chatroomId String
  date       DateTime
  count      Int      @default(0)
  chatmessageId Int[] @default([])
  updatedAt  DateTime @updatedAt
  createdAt  DateTime @default(now())
  chatroom   Chatroom @relation(fields: [chatroomId], references: [id])
  user       User     @relation(fields: [userId], references: [id])

  @@unique([userId, chatroomId, date])
}
model Reaction{
  id         Int      @id @default(autoincrement())
  emoji   String
  userId   Int
  messageId   Int
  
  user       User     @relation(fields: [userId], references: [id])
  message   Chatmessage     @relation(fields: [messageId], references:  [id])
  @@unique([userId, messageId, emoji])
}
